pipeline {
    agent {
        node {
            label 'project:any'
        }   
    }

    parameters {
        choice(choices: ['Test', 'QA', 'Beta', 'Production'], description: 's3 bucket that the build will target', name: 'BUILD_DEST')
        choice(choices: ['Snapshot', 'Release'], description: 'type of release', name: 'RELEASE_TYPE')
        choice(choices: ['minor', 'major', 'patch'], description: 'release version', name: 'RELEASE_VERSION')
        string(defaultValue: "", description: 'Specific Commit to build', name: 'COMMIT')
        string(defaultValue: "", description: 'Specific Tag to Build', name: 'TAG')
    }

    triggers {
        pollSCM('H/5 * * * *')
    }

    stages {
        stage('clean workspace'){
         steps{
            cleanWs()
         }
        }
          stage('checkout'){
            steps {
                script {
                    print "${GIT_BRANCH}"
                    print env.BRANCH_NAME

                    buildSource = "refs/heads/master"
                    if ("${TAG}" != "") {
                        buildSource = "refs/tags/${TAG}"
                    }
                    else if ("${COMMIT}" != "") {
                        buildSource = "${COMMIT}"
                    }
                }
                checkout ([
                    $class: 'GitSCM',
                    branches: [[name: buildSource]],
                    doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                    extensions: [
                        [
                          $class: 'WipeWorkspace'
                        ],
                        [
                          $class: 'LocalBranch',
                          localBranch: "**"
                        ]
                    ],
                    submoduleCfg: [],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
            }
        }
        stage('build') {
            steps {
                script {
                    versionChange = ""
                    if("${params.RELEASE_TYPE}" == "Release") {
                        versionChange = "${params.RELEASE_VERSION}"
                    }
                }
                
                sh """
                    echo "${versionChange}" >versionNum.txt
                    docker build . --tag="dockerinstance"
                    docker run --name nwisweb_data_connector_docker dockerinstance
                    pathtemplate=":usr/local/bin/nwisweb-tableau-data-connector/dist"
                    dockerinstanceid=\$( docker ps -aqf "name=nwisweb_data_connector_docker" )
                    docker cp  "\${dockerinstanceid}\${pathtemplate}" $WORKSPACE
                    docker cp  "\${dockerinstanceid}:usr/local/bin/nwisweb-tableau-data-connector/package.json" $WORKSPACE
                    docker cp  "\${dockerinstanceid}:usr/local/bin/nwisweb-tableau-data-connector/newVerNum.txt" $WORKSPACE
                    docker rm "\${dockerinstanceid}"
                """

                sshagent (credentials: ['wma-eto-eb-rsa']) {
                    script {
                        if("${params.RELEASE_TYPE}" == "Release") {
                            sh """
                                git add .
                                git commit -m "automatic version number increment"
                                git pull origin autoversion-test
                                git tag `cat newVerNum.txt`
                                git push -u origin HEAD:autoversion-test
                                git push origin --tag
                            """
                        }                    
                    }
                }
            }
        }
        
        stage('send to S3') {
            steps {
                script {
                    if("${params.BUILD_DEST}" == "Beta") {
                        targetDomain = "s3://nwisweb-tableau-wdc-beta-website"
                    }
                    else if("${params.BUILD_DEST}" == "Production"){
                        targetDomain = "s3://nwisweb-tableau-wdc-prod-website"
                    }
                    else if("${params.BUILD_DEST}" == "QA"){
                        targetDomain = "s3://nwisweb-tableau-wdc-qa-website"
                    }
                    else if("${params.BUILD_DEST}" == "Test"){
                        targetDomain = "s3://nwisweb-tableau-wdc-test-website"
                    }
                }
                sh """
                    aws s3 rm "${targetDomain}" --recursive
                    aws s3 cp $WORKSPACE/dist "${targetDomain}" --recursive
                """
            }
        }
    }
}
